"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BncClient", {
  enumerable: true,
  get: function get() {
    return _client.BncClient;
  }
});
Object.defineProperty(exports, "Transaction", {
  enumerable: true,
  get: function get() {
    return _tx["default"];
  }
});
exports.crypto = exports.amino = void 0;
Object.defineProperty(exports, "ledger", {
  enumerable: true,
  get: function get() {
    return _ledger["default"];
  }
});
Object.defineProperty(exports, "rpc", {
  enumerable: true,
  get: function get() {
    return _rpc["default"];
  }
});
exports.utils = exports.types = void 0;

require("./declarations");

var amino = _interopRequireWildcard(require("./amino"));

exports.amino = amino;

var _client = require("./client");

var crypto = _interopRequireWildcard(require("./crypto"));

exports.crypto = crypto;

var types = _interopRequireWildcard(require("./types"));

exports.types = types;

var utils = _interopRequireWildcard(require("./utils"));

exports.utils = utils;

var _ledger = _interopRequireDefault(require("./ledger"));

var _rpc = _interopRequireDefault(require("./rpc"));

var _tx = _interopRequireDefault(require("./tx"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }